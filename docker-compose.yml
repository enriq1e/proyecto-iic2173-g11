services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_service
    command: sh -c "npx sequelize-cli db:migrate && node src/api/index.js"
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      ROLE: "api"
      NODE_ENV: development
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASS}"
      DB_NAME: "${DB_NAME}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped   #RNF10

  api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_service_1
    command: sh -c "npx sequelize-cli db:migrate && node src/api/index.js"
    ports:
      - "3000:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      ROLE: "api"
      NODE_ENV: development
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASS}"
      DB_NAME: "${DB_NAME}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_service_2
    command: sh -c "npx sequelize-cli db:migrate && node src/api/index.js"
    ports:
      - "3002:${PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      ROLE: "api"
      NODE_ENV: development
      DB_HOST: "${DB_HOST}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASS}"
      DB_NAME: "${DB_NAME}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  broker:
    build: .
    container_name: broker_service
    command: ["node", "src/broker/mqttClient.js"]
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    env_file:
      - .env
    environment:
      ROLE: "broker"
    restart: unless-stopped   #RNF10
    
  db:
    image: postgres:13-alpine
    container_name: db_service
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
      POSTGRES_DB: "${DB_NAME}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped   #RNF10

volumes:
  postgres_data: